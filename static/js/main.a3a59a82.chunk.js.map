{"version":3,"sources":["components/Header/Header.js","components/Layout/Layout.js","helpers/miscellenous.js","components/Heading/Heading.js","components/Input/Input.js","components/Content/Score/Score.js","components/Content/Circles/Circles.js","components/Button/Button.js","components/Content/Controls/Controls.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Layout","children","getRandomNumber","to","Math","floor","random","isEqual","item1","item2","toLowerCase","Heading","heading","Input","maxLength","type","placeholder","id","value","onChange","event","inputChangeHandler","disabled","Score","style","textAlign","score","Circles","useState","limit","arr","i","push","getNumbersArray","circles","console","log","autoSelectedPosition","map","item","Fragment","key","onClick","selectedPosition","incrementScore","changeAutoSelectedPosition","decrementScore","Button","buttonClickHandler","name","Controls","startGame","stopGame","Content","setScore","setAutoSelectedPosition","prevState","alert","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kSAWeA,G,WARA,SAACC,GACZ,OACI,yBAAKC,UAAU,UACX,6CCMGC,EATA,SAACF,GACZ,OACI,yBAAKC,UAAU,UACX,kBAAC,EAAD,MACCD,EAAMG,W,OCWNC,EAAkB,SAACC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAAM,GAG/BI,EAAU,SAACC,EAAOC,GAC3B,MAAuB,kBAAXD,GAA0C,kBAAXC,EAChCD,IAAUC,EAEE,kBAAXD,GAA0C,kBAAXC,EAChCD,EAAME,gBAAkBD,EAAMC,mBADzC,GChBWC,EARC,SAACb,GACb,OACI,wBAAIC,UAAU,WACTD,EAAMc,UCWJC,G,MAbD,SAACf,GACX,OACI,2BACIgB,UAAWhB,EAAMgB,UACjBC,KAAMjB,EAAMiB,KACZC,YAAalB,EAAMkB,YACnBC,GAAInB,EAAMmB,GACVC,MAAOpB,EAAMoB,MACbC,SAAU,SAACC,GAAD,OAAWtB,EAAMuB,mBAAmBD,IAC9CE,SAAUxB,EAAMwB,aCIbC,EAbD,SAACzB,GACX,OACI,yBAAK0B,MAAO,CAAEC,UAAW,UACrB,yCACA,kBAAC,EAAD,CACIV,KAAK,SACLC,YAAY,QACZE,MAAOpB,EAAM4B,MACbJ,UAAU,MC4BXK,EApCC,SAAC7B,GAAW,IAAD,EAEL8B,mBJKS,SAACC,GAE5B,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,GAAKF,EAAOE,IACxBD,EAAIE,KAAKD,GAEb,OAAOD,EIVoBG,CAAgB,KAApCC,EAFgB,oBA6BvB,OAFAC,QAAQC,IAAI,yBAA0BtC,EAAMuC,sBAGxC,yBAAKtC,UAAU,kBAdXmC,EAAQI,KAAI,SAAAC,GACR,OACI,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACjB,yBAAKxC,UAAU,SAAS2C,QAAS,kBAAOnC,EAAQT,EAAMuC,qBAAsB,GAA0B,IAdpGM,EAc4FJ,OAb1GhC,EAAQT,EAAMuC,qBAAsBM,IACpC7C,EAAM8C,iBACN9C,EAAM+C,8BAEN/C,EAAMgD,mBALO,IAACH,KAeDJ,EAAO,IAAM,GAAK,mCCd5BQ,G,MANA,SAACjD,GACZ,OACI,4BAAQ4C,QAAS,kBAAM5C,EAAMkD,uBAAuBlD,EAAMmD,QCOnDC,EATE,SAACpD,GACd,OACI,yBAAKC,UAAU,YACX,kBAAC,EAAD,CAAQkD,KAAMnD,EAAMuC,qBAAuB,UAAY,OAAQW,mBAAoBlD,EAAMqD,YACzF,kBAAC,EAAD,CAAQF,KAAM,OAAQD,mBAAoBlD,EAAMsD,aCsC7CC,G,MArCC,SAACvD,GAAW,IAAD,EAEG8B,mBAAS,GAFZ,mBAEhBF,EAFgB,KAET4B,EAFS,OAGiC1B,mBAAS,GAH1C,mBAGhBS,EAHgB,KAGMkB,EAHN,KAevB,OACI,yBAAKxD,UAAU,WACX,kBAAC,EAAD,CAASa,QAAQ,mBACjB,gFACA,qEACA,kBAAC,EAAD,CAAOc,MAAOA,IACd,6BACA,kBAAC,EAAD,CACIW,qBAAsBA,EACtBO,eAAgB,kBAAMU,GAAS,SAAAE,GAAS,OAAIA,EAAY,MACxDV,eAAgB,kBAAMQ,GAAS,SAAAE,GAAS,OAAIA,EAAY,MACxDX,2BAA4B,kBAAMU,EAAwBrD,EAAgB,QAE9E,6BACA,kBAAC,EAAD,CACImC,qBAAsBA,EACtBc,UA1BM,WACdI,EAAwBrD,EAAgB,MA0BhCkD,SAvBK,WACbK,MAAM,uBAAyB/B,GAC/B4B,EAAS,GACTC,EAAwB,SCNjBG,EAVH,SAAC5D,GACT,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,EAAD,SCIV4D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B3C,QAAQC,IACN,iHAKE+B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBrC,QAAQC,IAAI,sCAGR+B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL/C,QAAQ+C,MAAM,4CAA6CA,MC1FjEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDYrB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,kBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,kBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL9C,QAAQC,IACN,oEAvFAmE,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCpC,QAAQC,IACN,iHAMJ6B,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.a3a59a82.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <p>leadsquared</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport Header from '../Header/Header';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout\">\n            <Header />\n            {props.children}\n        </div>\n    );\n};\n\nexport default Layout;\n","\nexport const parseData = (data) => {\n    return JSON.parse(JSON.stringify(data));\n};\n\nexport const validateValues = (value) => {\n    var regex = /^[a-zA-Z0-9!@#$%^&*)(. _-]{0,16}$/;\n    return regex.test(value);\n};\n\nexport const getNumbersArray = (limit) => {\n    const arr = [];\n    for (let i = 1; i <= limit; i++) {\n        arr.push(i);\n    }\n    return arr;\n};\n\nexport const getRandomNumber = (to) => {\n    return Math.floor(Math.random() * to) + 1;\n};\n\nexport const isEqual = (item1, item2) => {\n    if (typeof (item1) === 'number' && typeof (item2) === 'number') {\n        return item1 === item2;\n    }\n    if (typeof (item1) === 'string' && typeof (item2) === 'string') {\n        return item1.toLowerCase() === item2.toLowerCase();\n    }\n};\n\nexport const isObjectEmpty = (obj) => {\n    return Object.keys(obj).length === 0;\n};\n\nexport const isEmpty = (item) => {\n    if (typeof item === 'number') {\n        return false;\n    }\n    return item.trim() === '';\n};\n\nexport const isArrayNotEmpty = (arr) => {\n    return arr.length > 0;\n};\n\nexport const indexOf = (arr, value) => {\n    return arr.indexOf(value);\n};\n\nexport const isBoolean = (value) => {\n    return typeof value === \"boolean\";\n};\n\nexport const isNumber = (value) => {\n    return typeof value === \"number\";\n};\n\nexport const isString = (value) => {\n    return typeof value === \"string\";\n};\n\nexport const deleteItem = (array, id) => {\n    const updatedData = array.filter(item => item !== id);\n    return updatedData;\n};\n\nexport const isIncludes = (array, value) => {\n    return array.includes(value);\n};\n","import React from 'react';\n\nconst Heading = (props) => {\n    return (\n        <h2 className=\"heading\">\n            {props.heading}\n        </h2>\n    );\n};\n\nexport default Heading;\n","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n    return (\n        <input\n            maxLength={props.maxLength}\n            type={props.type}\n            placeholder={props.placeholder}\n            id={props.id}\n            value={props.value}\n            onChange={(event) => props.inputChangeHandler(event)}\n            disabled={props.disabled} />\n    );\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from '../../Input/Input';\n\nconst Score = (props) => {\n    return (\n        <div style={{ textAlign: 'right' }}>\n            <label>Score </label>\n            <Input\n                type=\"number\"\n                placeholder=\"Score\"\n                value={props.score}\n                disabled={true} />\n        </div>\n    );\n};\n\nexport default Score;\n","import React, { useState } from 'react';\nimport { getNumbersArray, isEqual } from '../../../helpers/miscellenous';\n\nconst Circles = (props) => {\n\n    const [circles] = useState(getNumbersArray(36));\n\n\n    const selectCircle = (selectedPosition) => {\n        if (isEqual(props.autoSelectedPosition, selectedPosition)) {\n            props.incrementScore();\n            props.changeAutoSelectedPosition();\n        } else {\n            props.decrementScore();\n        }\n    };\n\n    const getCircles = () => {\n        return (\n            circles.map(item => {\n                return (\n                    <React.Fragment key={item}>\n                        <div className=\"circle\" onClick={() => !isEqual(props.autoSelectedPosition, 0) ? selectCircle(item) : ''}></div>\n                        {item % 6 === 0 && <br />}\n                    </React.Fragment >\n                );\n            })\n        );\n    };\n\n    console.log('==selectedPosition====', props.autoSelectedPosition);\n\n    return (\n        <div className=\"circle-wrapper\">\n            {getCircles()}\n        </div>\n    );\n};\n\nexport default Circles;\n","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => {\n    return (\n        <button onClick={() => props.buttonClickHandler()}>{props.name}</button>\n    );\n};\n\nexport default Button\n","import React from 'react';\nimport Button from '../../Button/Button';\n\nconst Controls = (props) => {\n    return (\n        <div className=\"controls\">\n            <Button name={props.autoSelectedPosition ? 'Playing' : 'Play'} buttonClickHandler={props.startGame} />\n            <Button name={'Stop'} buttonClickHandler={props.stopGame} />\n        </div>\n    );\n};\n\nexport default Controls;\n","import React, { useState } from 'react';\nimport { getRandomNumber } from '../../helpers/miscellenous';\nimport Heading from '../Heading/Heading';\nimport Score from './Score/Score';\nimport Circles from './Circles/Circles';\nimport Controls from './Controls/Controls';\nimport './Content.css';\n\nconst Content = (props) => {\n\n    const [score, setScore] = useState(0);\n    const [autoSelectedPosition, setAutoSelectedPosition] = useState(0);\n\n    const startGame = () => {\n        setAutoSelectedPosition(getRandomNumber(36));\n    };\n\n    const stopGame = () => {\n        alert('Your final score is ' + score);\n        setScore(0);\n        setAutoSelectedPosition(0);\n    };\n\n    return (\n        <div className=\"content\">\n            <Heading heading=\"Hit the circle\" />\n            <p>Testing your skill how many circles you can hit ?</p>\n            <p>Click on Play button to start the game</p>\n            <Score score={score} />\n            <hr />\n            <Circles\n                autoSelectedPosition={autoSelectedPosition}\n                incrementScore={() => setScore(prevState => prevState + 1)}\n                decrementScore={() => setScore(prevState => prevState - 1)}\n                changeAutoSelectedPosition={() => setAutoSelectedPosition(getRandomNumber(36))}\n            />\n            <hr />\n            <Controls\n                autoSelectedPosition={autoSelectedPosition}\n                startGame={startGame}\n                stopGame={stopGame} />\n        </div>\n    );\n};\n\nexport default Content;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport Content from './components/Content/Content';\n\nconst App = (props) => {\n    return (\n        <div className=\"app\">\n            <Layout>\n                <Content />\n            </Layout>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}